<!DOCTYPE html>
<html lang="en">
<head>




<link rel="stylesheet" href="/css/normalize.css">
   <!--
  //   application.css is where you put your styles
  -->
<link rel="stylesheet" href="/css/application.css">
<!-- Ajax script -->
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="/js/application.js"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&callback=initMap" async defer>
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&libraries=places">
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&libraries=places&callback=initAutocomplete"async defer>
</script>

<input id="pac-input" class="controls" type="text" placeholder="Search Box">


</head>

<h3>My Google Maps Demo</h3>
  <div id="map">


<script>
      function initMap() {
        var mapDiv = document.getElementById('map');
        var map = new google.maps.Map(mapDiv, {
            center: {lat: 37.7749, lng: -122.4194},
            zoom: 8
        });
      }

      function initAutocomplete() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 37.7749, lng: -122.4194},
    zoom: 13,
    mapTypeId: 'roadmap'
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
}






</script>

</div>


<body>
  <div class="container">
    <header>

  <nav>
    <ul>
      <li> <a href="/">Home</a></li>
      <li> <a href="/restaurants">Restaurants</a></li>
      <% if current_user %>
        <li> <a href="/users/<%=current_user.id%>">Profile</a></li>
        <li> <a href="/logout">Logout</a></li>
        <% else %>
        <li> <a href="/users/new">Register</a></li>
        <li> <a href="/sessions/new">Login</a></li>
        <% end %>
    </ul>
  </nav>

  </header>
 </div>
  <title></title>
  <%= yield %>
</body>
</html>
