<!DOCTYPE html>
<html lang="en">
<head>


<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="/css/bootstrap.css">
<link rel="stylesheet" href="/css/normalize.css">
   <!--
  //   application.css is where you put your styles
  -->
<link rel="stylesheet" href="/css/application.css">
<!-- Ajax script -->
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="/js/application.js"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&callback=initMap" async defer>
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&libraries=places">
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_ACCOUNT_KEY'] %>&libraries=places&callback=initAutocomplete"async defer>
</script>
<style>
 #map {
        width: 50%;
        height: 50%;
        background-color: grey;
      }

</style>
<title>Website</title>


<nav class="navbar navbar-default">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <!-- <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button> -->
      <a class="navbar-brand" href="/">Website</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
      </ul>
    <ul class="navbar-nav navbar-right">
        <li> <a href="/">Home</a></li>
    </ul>

    <ul class="navbar-nav navbar-right">
        <li> <a href="/restaurants">Restaurants</a></li>
        <% if current_user %>
    </ul>

    <ul class="navbar-nav navbar-right">
        <li> <a href="/users/<%=current_user.id%>">Profile</a></li>
    </ul>

    <ul class="navbar-nav navbar-right">
        <li> <a href="/logout">Logout</a></li>
        <% else %>
    </ul>

    <ul class="navbar-nav navbar-right">
        <li> <a href="/users/new">Register</a></li>
    </ul>

    <ul class="navbar-nav navbar-right">
        <li> <a href="/sessions/new">Login</a></li>
    </ul>

    <% end %>
  </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>

<input id="pac-input" class="controls" type="text" placeholder="Search Box">


</head>

  <div id="map">


<script>
var geocoder;
var map;
  function initMap() {
    geocoder = new google.maps.Geocoder();
      var mapDiv = document.getElementById('map');
      var map = new google.maps.Map(mapDiv, {
        center: {lat: 37.7749, lng: -122.4194},
        zoom: 8
        });

  function codeAddress() {
    var address = document.getElementById('address').value;
    geocoder.geocode( {'address': address}, function(results, status) {
    if (status == 'OK') {
      map.setCenter(results[0].geometry.location);
      var marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location,
          icon: icon
      });
      } else {
      alert('Geocode failure: ' + status);
      }
    });
  }






      // var locations = [
      //       ['<h4>Los Compadres Taco Truck</h4>', 27.78490, -122.39598],
      //       ['<h4>Garaje</h4>', 37.78179, -122.39603],
      //       ['<h4>Caramba</h4>', 34.69426, -79.88072],
      //       ['<h4>Chipotle Mexican Grill</h4>', 37.78707, -122.40028],
      //       ['<h4>Uno Dos Tacos</h4>', 35.48525, -85.02251],
      //       ['<h4>Fayala</h4>', 37.78915, -122.39431]
      //     ];

      // var infowindow = new google.maps.InfoWindow({
      //       maxWidth: 160
      //     });
      //     var markers = new Array();
      //     for (var i = 0; i < locations.length; i++) {
      //       var marker = new google.maps.Marker({
      //         position: new google.maps.LatLng(locations[i][1], locations[i][2]),
      //         map: map
      //     });
      //     markers.push(marker);
      //     google.maps.event.addListener(marker, 'click', (function(marker, i) {
      //       return function() {
      //         infowindow.setContent(locations[i][0]);
      //         infowindow.open(map, marker);
      //       };
      //     })(marker, i));
      //   };



  }







  function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 37.7749, lng: -122.4194},
    zoom: 13,
    mapTypeId: 'roadmap'
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
}


</script>

</div>


<body>
  <div class="container">
    <header>



  </header>
 </div>
  <title></title>
  <%= yield %>
</body>
</html>
